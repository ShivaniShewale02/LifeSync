// src/pages/QuestionsPage.js
import React, { useState } from "react";
import "../styles/questionnaire.css";
import CompletionPage from "./CompletionPage"; // new page after quiz

const questions = [
  // Health Questions
  {
    question: "How many hours of sleep do you usually get per night?",
    options: ["üõå Less than 5 hours", "üò¥ 5‚Äì6 hours", "üåô 7‚Äì8 hours", "üí§ More than 8 hours"],
  },
  {
    question: "How often do you exercise or stay active per week?",
    options: ["üõãÔ∏è Rarely", "üö∂ 1‚Äì2 times", "üèÉ 3‚Äì4 times", "üí™ 5+ times"],
  },
  {
    question: "How would you describe your daily diet?",
    options: ["üçî Mostly fast food", "ü•ó Balanced but occasional junk", "ü•¶ Mostly healthy", "üå± Fully plant-based/clean"],
  },
  {
    question: "How hydrated are you daily?",
    options: ["ü•§ Rarely drink water", "üíß 2‚Äì3 glasses", "üí¶ 4‚Äì6 glasses", "üåä 7+ glasses"],
  },
  {
    question: "Do you experience stress or anxiety frequently?",
    options: ["üòü Always", "üòê Sometimes", "üôÇ Rarely", "üòå Almost never"],
  },

  // Productivity Questions
  {
    question: "How do you plan your daily tasks?",
    options: ["‚ùå I don‚Äôt plan", "üìù To-do lists occasionally", "üìÖ I use planners or apps", "‚è±Ô∏è I track tasks and time carefully"],
  },
  {
    question: "How often do distractions affect your work/study?",
    options: ["üòµ Constantly", "üòï Often", "üôÇ Sometimes", "üòå Rarely"],
  },
  {
    question: "How satisfied are you with your current productivity?",
    options: ["üò© Very low", "üòê Moderate", "üôÇ Good", "üòé Excellent"],
  },

  // Emotional Wellbeing / Mind Questions
  {
    question: "How would you rate your mood in a typical week?",
    options: ["üòî Mostly sad/stressed", "üòê Mixed emotions", "üôÇ Mostly positive", "üòÑ Very happy"],
  },
  {
    question: "Do you practice mindfulness, meditation, or gratitude journaling?",
    options: ["‚ùå Never", "üßò Occasionally", "üòä Weekly", "‚ú® Daily"],
  },
  {
    question: "How strong is your support system (family, friends, peers)?",
    options: ["üòû Weak", "üòê Average", "üôÇ Good", "üíñ Very strong"],
  },
  {
    question: "How often do you feel overwhelmed by responsibilities?",
    options: ["üò´ Always", "üòï Often", "üôÇ Sometimes", "üòå Rarely"],
  },

  // Finance Questions
  {
    question: "Do you track your income and expenses?",
    options: ["‚ùå Never", "üìù Sometimes", "üìä Often", "üíª Always"],
  },
  {
    question: "How would you describe your saving habits?",
    options: ["üí∏ I rarely save", "üè¶ I save occasionally", "üí∞ I save regularly", "üíé I have a structured plan"],
  },
  {
    question: "How comfortable are you with budgeting or financial planning?",
    options: ["üòñ Not at all", "üòê Somewhat", "üôÇ Comfortable", "üòé Very confident"],
  },
];

export default function Questionnaire() {
  const [current, setCurrent] = useState(0);
  const [selected, setSelected] = useState(null);
  const [answers, setAnswers] = useState([]);
  const [completed, setCompleted] = useState(false); // new

  const handleNext = () => {
    if (selected !== null) {
      setAnswers([...answers, questions[current].options[selected]]);
      if (current < questions.length - 1) {
        setCurrent(current + 1);
        setSelected(null);
      } else {
        // Mark quiz as completed
        setCompleted(true);
      }
    }
  };

  const progress = ((current + 1) / questions.length) * 100;

  if (completed) {
    return <CompletionPage answers={answers} />; // Show completion page
  }

  return (
    <div className="questionnaire-container">
      <div className="progress-bar">
        <div className="progress-fill" style={{ width: `${progress}%` }}></div>
      </div>

      <div className="question-box">
        <h2>{questions[current].question}</h2>
        <div className="options">
          {questions[current].options.map((option, i) => (
            <button
              key={i}
              className={`option-btn ${selected === i ? "selected" : ""}`}
              onClick={() => setSelected(i)}
            >
              {option}
            </button>
          ))}
        </div>
        <button className="next-btn" onClick={handleNext} disabled={selected === null}>
          Next ‚û°Ô∏è
        </button>
      </div>
    </div>
  );
}
